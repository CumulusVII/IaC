AWSTemplateFormatVersion: "2010-09-09"

Description: Creating VPC attaching IGW to it and then Creating three public subnets in same vpc
Parameters:
  Environment:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: csye-6225-env

  VpcCIDR:
    Type: String
    Default: 10.192.0.0/16
    Description: Enter the IP range

  CIDRPublicSubnet1:
    Type: String
    Default: 10.192.10.0/24
    Description: Enter the IP range in the first Availability Zone

  CIDRPublicSubnet2:
    Type: String
    Default: 10.192.11.0/24
    Description: Enter the IP range in the second Availability Zone

  CIDRPublicSubnet3:
    Type: String
    Default: 10.192.20.0/24
    Description: Enter the IP range in the third Availability Zone
  EC2InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro]
    Description: "EC2Instance AMI"
  AMI:
    Type: String
    Default: "ami-0faf32e93d002e9d6"
    Description: "The AMI to use"

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref Environment
  #creating IGW
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref Environment
  #Attaching above created IGW with myVPC
  IGAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  #creating Public Subnet-1:
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref CIDRPublicSubnet1
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment} Public Subnet (AZ1)
  #creating Public Subnet-2:
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref CIDRPublicSubnet2
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment} Public Subnet (AZ2)
  #creating Public Subnet-3:
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !GetAZs ""]
      CidrBlock: !Ref CIDRPublicSubnet3
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${Environment} Public Subnet (AZ3)
  #creating A Public Route Table:
  Route:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Environment} Public Routes
  #creating a public route to above created public route table with destination CIDR block 0.0.0.0/0 and Above created IGW
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: IGAttachment
    Properties:
      RouteTableId: !Ref Route
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  #Attaching the public subnets-1 to the Public Route Table:
  PSubnet1RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Route
      SubnetId: !Ref PublicSubnet1
  #Attaching the public subnets-2 to the Public Route Table:
  PSubnet2RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Route
      SubnetId: !Ref PublicSubnet2
  #Attaching the public subnets-3 to the Public Route Table:
  PSubnet3RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Route
      SubnetId: !Ref PublicSubnet3
  # EC2 instance Launch
  EC2AppInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AMI
      InstanceType: !Ref EC2InstanceType
      KeyName: aws
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref EC2InstanceSecurityGroup
      DisableApiTermination: false # protected against accidental termination :NO
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp2
            DeleteOnTermination: true
            VolumeSize: 50
            Encrypted: true
      Tags:
        -
          Key: Name
          Value: webapp
      UserData:
        Fn::Base64:
            !Sub |
            #!/bin/bash
            echo "Starting the REST API Service"
            sudo systemctl enable webapp.service
            sudo systemctl start webapp.service
            sudo systemctl restart webapp.service
            
            APISRVC=$?
            if [ $APISRVC -eq 0 ]; then
              echo "API service is running successfully!"
            else
              echo "Unable to start the API service"
            fi
  
  SSHSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SSH Security Group
      SecurityGroupIngress:

        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIpv6: ::/0    

        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIpv6: ::/0  

        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIpv6: ::/0

        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIpv6: ::/0                   
      Tags:
        - Key: Name
          Value: SSH Security Group
      VpcId: !Ref VPC
  
  # EC2 Security Group
  EC2InstanceSecurityGroup:
     Type: AWS::EC2::SecurityGroup
     Properties:
      GroupDescription: EC2 Security group with ports
      GroupName: applicationSecurityGroup
      SecurityGroupIngress: [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "CidrIp" : "0.0.0.0/0"
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "80",
            "ToPort" : "80",
            "CidrIp" : "0.0.0.0/0"
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "443",
            "ToPort" : "443",
            "CidrIp" : "0.0.0.0/0"
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "3000",
            "ToPort" : "3000",
            "CidrIp" : "0.0.0.0/0"
          }
        ]
      Tags:
        - Key: Name
          Value: EC2 Security Group
      VpcId: !Ref VPC

#For exposing the resources from one Stack on CloudFormation to Others
Outputs:
  VpcId:
    Description: The VPC ID
    Value: !Ref VPC
  PublicSubnet1:
    Description: Public Subnet-1
    Value: !Ref PublicSubnet1
  PublicSubnet2:
    Description: Public Subnet-2
    Value: !Ref PublicSubnet2
  PublicSubnet3:
    Description: Public Subnet-3
    Value: !Ref PublicSubnet3
  Subnets:
    Description: The list of subnets
    Value:
      !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3]]
