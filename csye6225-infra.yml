AWSTemplateFormatVersion: "2010-09-09"

Description: Creating VPC attaching IGW to it and then Creating three public subnets in same vpc
Parameters:
  Environment:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: CSYE-6225-env

  VpcCIDR:
    Type: String
    Default: 10.192.0.0/16
    Description: Enter the IP range

  CIDRPublicSubnet1:
    Type: String
    Default: 10.192.10.0/24
    Description: Enter the IP range in the first Availability Zone

  CIDRPublicSubnet2:
    Type: String
    Default: 10.192.11.0/24
    Description: Enter the IP range in the second Availability Zone

  CIDRPublicSubnet3:
    Type: String
    Default: 10.192.20.0/24
    Description: Enter the IP range in the third Availability Zone

  CIDRPrivateSubnet1:
    Type: String
    Default: 10.192.30.0/24
    Description: Please Enter the IP Range for Private Subnet-1

  CIDRPrivateSubnet2:
    Type: String
    Default: 10.192.40.0/24
    Description: Please Enter the IP Range for Private Subnet-2

  CIDRPrivateSubnet3:
    Type: String
    Default: 10.192.50.0/24
    Description: Please Enter the IP Range for Private Subnet-3

  EC2InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro]
    Description: "EC2Instance AMI"
  AMI:
    Type: String
    Default: "ami-0f317db6312a9659e"
    Description: "The AMI to use"
  DomainName:
    Description: Domain Name for S3 Bucket Naming
    Type: String
    Default: "dev.jeeltpatel.me"
  DatabaseName:
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters
    Default: csye6225
    Description: Postgres database name
    MaxLength: 64
    MinLength: 1
    Type: String
  DatabaseUser:
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters
    Default: csye6225
    Description: Username for Postgres database access
    MaxLength: 16
    MinLength: 1
    NoEcho: true
    Type: String
  DatabasePassword:
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: Must contain only alphanumeric characters
    Default: password
    Description: Password for Postgres database access
    MaxLength: 41
    MinLength: 8
    NoEcho: true
    Type: String
  DatabaseInstanceIdentifier:
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters
    Default: csye6225
    Description: Instance identifier name
    MaxLength: 60
    MinLength: 1
    Type: String
  DatabaseInstanceClass:
    AllowedValues:
      - db.t3.micro
    ConstraintDescription: Must select a valid database instance type
    Default: db.t3.micro
    Description: The database instance type
    Type: String
  S3BucketRegion:
    Default: "us-east-1"
    Type: String
    Description: S3 Bucket Region
  HostedZoneName:
    Type: String
    Default: "jeeltpatel.me."
    Description: Hosted Zone Name

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref Environment
  #creating IGW
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref Environment
  #Attaching above created IGW with myVPC
  IGAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  #creating Public Subnet-1:
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref CIDRPublicSubnet1
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment} Public Subnet (AZ1)
  #creating Public Subnet-2:
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref CIDRPublicSubnet2
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment} Public Subnet (AZ2)
  #creating Public Subnet-3:
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !GetAZs ""]
      CidrBlock: !Ref CIDRPublicSubnet3
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${Environment} Public Subnet (AZ3)
  #Private Subnet 1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref CIDRPrivateSubnet1
      AvailabilityZone: !Select [3, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub ${Environment} Private Subnet (AZ3)
  # Private Subnet 2
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref CIDRPrivateSubnet2
      AvailabilityZone: !Select [4, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub ${Environment} Private Subnet (AZ4)
  # Private Subnet 3
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref CIDRPrivateSubnet3
      AvailabilityZone: !Select [5, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub ${Environment} Private Subnet (AZ5)
  #creating A Public Route Table:
  Route:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Environment} Public Routes
  #creating A Private Route Table:
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${Environment} Private Route Table
      VpcId: !Ref VPC
  #creating a public route to above created public route table with destination CIDR block 0.0.0.0/0 and Above created IGW
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: IGAttachment
    Properties:
      RouteTableId: !Ref Route
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  #Attaching the public subnets-1 to the Public Route Table:
  PSubnet1RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Route
      SubnetId: !Ref PublicSubnet1
  #Attaching the public subnets-2 to the Public Route Table:
  PSubnet2RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Route
      SubnetId: !Ref PublicSubnet2
  #Attaching the public subnets-3 to the Public Route Table:
  PSubnet3RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Route
      SubnetId: !Ref PublicSubnet3
    #Attaching the private subnets-1 to the private Route Table:
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1
  #Attaching the private subnets-2 to the private Route Table:
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2
    #Attaching the private subnets-3 to the private Route Table:
  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet3
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Join ["", ["dev", ., !Ref HostedZoneName]]
      Name: !Join ["", ["dev", ., !Ref HostedZoneName]]
      Type: A
      TTL: "60"
      ResourceRecords:
        - !GetAtt EC2AppInstance.PublicIp
  # EC2 instance Launch
  EC2AppInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AMI
      IamInstanceProfile: !Ref DemoInstanceProfile
      InstanceType: !Ref EC2InstanceType
      KeyName: aws
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref EC2InstanceSecurityGroup
      DisableApiTermination: false # protected against accidental termination :NO
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp2
            DeleteOnTermination: true
            VolumeSize: 50
            Encrypted: true
      Tags:
        - Key: Name
          Value: webapp
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          pwd
          cd /home/ubuntu/webapp
          cp .env .env.bak
          rm .env
          pwd
          touch .env
          echo PORT="3000" >> .env
          echo HOST="${DatabaseInstance.Endpoint.Address}" >> .env
          echo DBUSER="${DatabaseUser}" >> .env
          echo DBPASSWORD="${DatabasePassword}" >> .env
          echo AWS_BUCKET_NAME="${S3Bucket}" >> .env
          echo DATABASE="${DatabaseName}" >> .env
          echo AWS_BUCKET_REGION="${S3BucketRegion}" >> .env

          echo "Starting the REST API Service"

          sudo systemctl restart webservice.service
          sudo systemctl status webservice.service

          APISRVC=$?
          if [ $APISRVC -eq 0 ]; then
            echo "API service is running successfully!"
          else
            echo "Unable to start the API service"
          fi

  # Database Subnet Group
  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS database
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      Tags:
        - Key: Name
          Value: database subnets
  # EC2 Security Group
  EC2InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 Security group with ports
      GroupName: applicationSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: EC2 Security Group
      VpcId: !Ref VPC
  # Database Security Group
  DataBaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: RDS Security group with ports
      GroupName: database
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref EC2InstanceSecurityGroup
  # Create s3 bucket
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        !Join [
          ".",
          [
            !Select [0, !Split [-, !Select [2, !Split [/, !Ref AWS::StackId]]]],
            !Ref DomainName,
          ],
        ]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: Rule for lifecycle of S3 bucket
            Prefix: logs
            Status: Enabled
            ExpirationInDays: 31
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
  # RDS Parameter Group
  RDSParamGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Family: postgres14
      Description: Custom Database Parameter Group
  # RDS Instance
  DatabaseInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: !Ref DatabaseInstanceClass
      DBInstanceIdentifier: !Ref DatabaseInstanceIdentifier
      DBName: !Ref DatabaseName
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      Engine: postgres
      EngineVersion: 14.4
      AllocatedStorage: 20
      StorageEncrypted: true
      MasterUsername: !Ref DatabaseUser
      MasterUserPassword: !Ref DatabasePassword
      PubliclyAccessible: false
      DBParameterGroupName: !Ref RDSParamGroup
      VPCSecurityGroups:
        - !Ref DataBaseSecurityGroup

  # IAM Role
  RootRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "EC2-CSYE6225"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
  #Instance Profile
  DemoInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: demo-ec2-instance-profile
      Path: /
      Roles:
        - !Ref RootRole
  # IAM Policy
  RolePolicies:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: WebAppS3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:Put*"
              - "s3:Get*"
              - "s3:Delete*"
            Resource:
              - "Fn::Join":
                  - ""
                  - - "arn:aws:s3:::"
                    - Ref: S3Bucket
                    - /*
              - "Fn::Join":
                  - ""
                  - - "arn:aws:s3:::"
                    - Ref: S3Bucket
      Roles:
        - Ref: RootRole
  # EC2 CloudWatch
  CloudWatchPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "EC2CloudWatchPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "cloudwatch:PutMetricData"
              - "ec2:DescribeTags"
              - "logs:PutLogEvents"
              - "logs:DescribeLogStreams"
              - "logs:DescribeLogGroups"
              - "logs:CreateLogStream"
              - "logs:CreateLogGroup"
            Resource: "*"
          - Effect: Allow
            Action:
              - "ssm:GetParameter"
              - "ssm:PutParameter"
            Resource: "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*"
      Roles:
        - Ref: RootRole
#For exposing the resources from one Stack on CloudFormation to Others
Outputs:
  VpcId:
    Description: The VPC ID
    Value: !Ref VPC
  PublicSubnet1:
    Description: Public Subnet-1
    Value: !Ref PublicSubnet1
  PublicSubnet2:
    Description: Public Subnet-2
    Value: !Ref PublicSubnet2
  PublicSubnet3:
    Description: Public Subnet-3
    Value: !Ref PublicSubnet3
  Subnets:
    Description: The list of subnets
    Value:
      !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3]]
